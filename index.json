{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2023-07-13T02:44:33.197Z",
    "end": "2023-07-13T02:44:35.749Z",
    "duration": 2552,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d50f3998-587a-4adb-b117-ff2c06a4eca0",
      "title": "",
      "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/reqres.spec.ts",
      "file": "/test/tests/reqres.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
          "title": "ReqRes API",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/reqres.spec.ts",
          "file": "/test/tests/reqres.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /users should return status 200 and a list of users",
              "fullTitle": "ReqRes API GET to /users should return status 200 and a list of users",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users',\n            method: 'get',\n            params: { page: 2 },\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.page).to.equal(2);\n        (0, chai_1.expect)(responseBody.per_page).to.equal(6);\n        (0, chai_1.expect)(responseBody.total).to.equal(12);\n        (0, chai_1.expect)(responseBody.total_pages).to.equal(2);\n        (0, chai_1.expect)(responseBody.data).to.have.lengthOf(6);\n        for (let i = 0; i < fixtures.users.length; i += 1) {\n            const responseUsersData = responseBody.data;\n            (0, chai_1.expect)(responseUsersData[i].id).to.equal(fixtures.users[i].id);\n            (0, chai_1.expect)(responseUsersData[i].email).to.equal(fixtures.users[i].email);\n            (0, chai_1.expect)(responseUsersData[i].first_name).to.equal(fixtures.users[i].first_name);\n            (0, chai_1.expect)(responseUsersData[i].last_name).to.equal(fixtures.users[i].last_name);\n            (0, chai_1.expect)(responseUsersData[i].avatar).to.equal(fixtures.users[i].avatar);\n        }\n    })",
              "err": {},
              "uuid": "1f40694f-9179-4f3e-9cc7-458e8e15f43f",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for an existing user should return status 200 and the user data",
              "fullTitle": "ReqRes API GET to /users/id for an existing user should return status 200 and the user data",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseUserData = response.data.data;\n        (0, chai_1.expect)(responseUserData.id).to.equal(2);\n        (0, chai_1.expect)(responseUserData.email).to.equal('janet.weaver@reqres.in');\n        (0, chai_1.expect)(responseUserData.first_name).to.equal('Janet');\n        (0, chai_1.expect)(responseUserData.last_name).to.equal('Weaver');\n        (0, chai_1.expect)(responseUserData.avatar).to.equal('https://reqres.in/img/faces/2-image.jpg');\n    })",
              "err": {},
              "uuid": "a407f10c-340d-4bb1-bb1e-a6df88612799",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for a user that does not exist should return status 404",
              "fullTitle": "ReqRes API GET to /users/id for a user that does not exist should return status 404",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/23',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(404);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "ea1e3f32-8435-4285-8222-824db5ddb300",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors should return status 200 and a list of colors",
              "fullTitle": "ReqRes API GET to /colors should return status 200 and a list of colors",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/colors',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.page).to.equal(1);\n        (0, chai_1.expect)(responseBody.per_page).to.equal(6);\n        (0, chai_1.expect)(responseBody.total).to.equal(12);\n        (0, chai_1.expect)(responseBody.total_pages).to.equal(2);\n        (0, chai_1.expect)(responseBody.data).to.have.lengthOf(6);\n        for (let i = 0; i < fixtures.colors.length; i += 1) {\n            const responseColorsData = responseBody.data;\n            (0, chai_1.expect)(responseColorsData[i].id).to.equal(fixtures.colors[i].id);\n            (0, chai_1.expect)(responseColorsData[i].name).to.equal(fixtures.colors[i].name);\n            (0, chai_1.expect)(responseColorsData[i].year).to.equal(fixtures.colors[i].year);\n            (0, chai_1.expect)(responseColorsData[i].color).to.equal(fixtures.colors[i].color);\n            (0, chai_1.expect)(responseColorsData[i].pantone_value).to.equal(fixtures.colors[i].pantone_value);\n        }\n    })",
              "err": {},
              "uuid": "03795c56-8c72-454b-beed-782268267301",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for an existing color should return status 200 and the color data",
              "fullTitle": "ReqRes API GET to /colors/id for an existing color should return status 200 and the color data",
              "timedOut": false,
              "duration": 202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/colors/2',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseColorData = response.data.data;\n        (0, chai_1.expect)(responseColorData.id).to.equal(2);\n        (0, chai_1.expect)(responseColorData.name).to.equal('fuchsia rose');\n        (0, chai_1.expect)(responseColorData.year).to.equal(2001);\n        (0, chai_1.expect)(responseColorData.color).to.equal('#C74375');\n        (0, chai_1.expect)(responseColorData.pantone_value).to.equal('17-2031');\n    })",
              "err": {},
              "uuid": "16488f70-5d59-4154-bf4b-85774ea29a59",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for a color that does not exist should return status 404",
              "fullTitle": "ReqRes API GET to /colors/id for a color that does not exist should return status 404",
              "timedOut": false,
              "duration": 208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/colors/23',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(404);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "e9acccbe-c352-4378-aa74-827c1739c761",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /users with valid data should return status 201 and the user data",
              "fullTitle": "ReqRes API POST to /users with valid data should return status 201 and the user data",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            name: 'morpheus',\n            job: 'leader',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(201);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.name).to.equal(requestBody.name);\n        (0, chai_1.expect)(responseBody.job).to.equal(requestBody.job);\n        (0, chai_1.expect)(responseBody.id).to.be.a('string').and.match(oneToThreeDigits);\n        (0, chai_1.expect)(responseBody.createdAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "dd055df0-2aed-4a5d-b967-3078bdea7989",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'put',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.name).to.equal(requestBody.name);\n        (0, chai_1.expect)(responseBody.job).to.equal(requestBody.job);\n        (0, chai_1.expect)(responseBody.updatedAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "fa9d0bcd-4c26-46d3-92a1-080fd386f5ca",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'patch',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.name).to.equal(requestBody.name);\n        (0, chai_1.expect)(responseBody.job).to.equal(requestBody.job);\n        (0, chai_1.expect)(responseBody.updatedAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "fabbcb9b-0f11-4e1f-969a-4a2bf625024f",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE to /users/id for an existing user should return status 204",
              "fullTitle": "ReqRes API DELETE to /users/id for an existing user should return status 204",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'delete',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(204);\n        (0, chai_1.expect)(response.headers['content-length']).to.equal('0');\n    })",
              "err": {},
              "uuid": "ff8feb0d-d6a5-44e6-a1a7-0887c12b0401",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with valid data should return status 200 and the registration id and token",
              "fullTitle": "ReqRes API POST to /register with valid data should return status 200 and the registration id and token",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/register',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.id).to.equal(4);\n        (0, chai_1.expect)(responseBody.token).to.equal('QpwL5tke4Pnpja7X4');\n    })",
              "err": {},
              "uuid": "3c632b1c-78f2-4994-86ee-042a9871be4d",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /register with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'sydney@fife',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/register',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(400);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data.error).to.equal('Missing password');\n    })",
              "err": {},
              "uuid": "46c5af6c-e395-4824-be36-db64c3a377f6",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with valid data should return status 200 and the login token",
              "fullTitle": "ReqRes API POST to /login with valid data should return status 200 and the login token",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/login',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data.token).to.equal('QpwL5tke4Pnpja7X4');\n    })",
              "err": {},
              "uuid": "35c38cbd-d061-412d-a731-8a29c57c4050",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /login with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'peter@klaven',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/login',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(400);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data.error).to.equal('Missing password');\n    })",
              "err": {},
              "uuid": "c7cd0b93-ab4a-416a-aa0d-e331efe95e04",
              "parentUUID": "cc99573c-62b1-4ad6-a0fb-7b5ce4dcba2c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1f40694f-9179-4f3e-9cc7-458e8e15f43f",
            "a407f10c-340d-4bb1-bb1e-a6df88612799",
            "ea1e3f32-8435-4285-8222-824db5ddb300",
            "03795c56-8c72-454b-beed-782268267301",
            "16488f70-5d59-4154-bf4b-85774ea29a59",
            "e9acccbe-c352-4378-aa74-827c1739c761",
            "dd055df0-2aed-4a5d-b967-3078bdea7989",
            "fa9d0bcd-4c26-46d3-92a1-080fd386f5ca",
            "fabbcb9b-0f11-4e1f-969a-4a2bf625024f",
            "ff8feb0d-d6a5-44e6-a1a7-0887c12b0401",
            "3c632b1c-78f2-4994-86ee-042a9871be4d",
            "46c5af6c-e395-4824-be36-db64c3a377f6",
            "35c38cbd-d061-412d-a731-8a29c57c4050",
            "c7cd0b93-ab4a-416a-aa0d-e331efe95e04"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2536,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "index",
        "reportDir": "./reports",
        "charts": "true"
      },
      "version": "6.2.0"
    }
  }
}