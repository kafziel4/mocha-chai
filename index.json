{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2022-05-24T01:29:04.063Z",
    "end": "2022-05-24T01:29:08.919Z",
    "duration": 4856,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "37a2c1c7-246a-4f5c-b89e-5e95a347cc40",
      "title": "",
      "fullFile": "/home/runner/work/mocha-chai/mocha-chai/test/tests/reqres.spec.ts",
      "file": "/test/tests/reqres.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
          "title": "ReqRes API",
          "fullFile": "/home/runner/work/mocha-chai/mocha-chai/test/tests/reqres.spec.ts",
          "file": "/test/tests/reqres.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /users should return status 200 and a list of users",
              "fullTitle": "ReqRes API GET to /users should return status 200 and a list of users",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users',\n            method: 'get',\n            params: { page: 2 },\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.page).to.equal(2);\n        (0, chai_1.expect)(responseBody.per_page).to.equal(6);\n        (0, chai_1.expect)(responseBody.total).to.equal(12);\n        (0, chai_1.expect)(responseBody.total_pages).to.equal(2);\n        (0, chai_1.expect)(responseBody.data).to.have.lengthOf(6);\n        for (let i = 0; i < fixtures.users.length; i += 1) {\n            const responseUsersData = responseBody.data;\n            (0, chai_1.expect)(responseUsersData[i].id).to.equal(fixtures.users[i].id);\n            (0, chai_1.expect)(responseUsersData[i].email).to.equal(fixtures.users[i].email);\n            (0, chai_1.expect)(responseUsersData[i].first_name).to.equal(fixtures.users[i].first_name);\n            (0, chai_1.expect)(responseUsersData[i].last_name).to.equal(fixtures.users[i].last_name);\n            (0, chai_1.expect)(responseUsersData[i].avatar).to.equal(fixtures.users[i].avatar);\n        }\n    })",
              "err": {},
              "uuid": "2095d8a6-f4ca-4c33-b585-dea9379a8f67",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for an existing user should return status 200 and the user data",
              "fullTitle": "ReqRes API GET to /users/id for an existing user should return status 200 and the user data",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseUserData = response.data.data;\n        (0, chai_1.expect)(responseUserData.id).to.equal(2);\n        (0, chai_1.expect)(responseUserData.email).to.equal('janet.weaver@reqres.in');\n        (0, chai_1.expect)(responseUserData.first_name).to.equal('Janet');\n        (0, chai_1.expect)(responseUserData.last_name).to.equal('Weaver');\n        (0, chai_1.expect)(responseUserData.avatar).to.equal('https://reqres.in/img/faces/2-image.jpg');\n    })",
              "err": {},
              "uuid": "38826f0e-c414-4964-98fa-09a86d0c11dc",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for a user that does not exist should return status 404",
              "fullTitle": "ReqRes API GET to /users/id for a user that does not exist should return status 404",
              "timedOut": false,
              "duration": 377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/23',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(404);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "99dec6d1-9620-4364-9ce6-0c84baf117c1",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get to /colors should return status 200 and a list of colors",
              "fullTitle": "ReqRes API Get to /colors should return status 200 and a list of colors",
              "timedOut": false,
              "duration": 418,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/colors',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.page).to.equal(1);\n        (0, chai_1.expect)(responseBody.per_page).to.equal(6);\n        (0, chai_1.expect)(responseBody.total).to.equal(12);\n        (0, chai_1.expect)(responseBody.total_pages).to.equal(2);\n        (0, chai_1.expect)(responseBody.data).to.have.lengthOf(6);\n        for (let i = 0; i < fixtures.colors.length; i += 1) {\n            const responseColorsData = responseBody.data;\n            (0, chai_1.expect)(responseColorsData[i].id).to.equal(fixtures.colors[i].id);\n            (0, chai_1.expect)(responseColorsData[i].name).to.equal(fixtures.colors[i].name);\n            (0, chai_1.expect)(responseColorsData[i].year).to.equal(fixtures.colors[i].year);\n            (0, chai_1.expect)(responseColorsData[i].color).to.equal(fixtures.colors[i].color);\n            (0, chai_1.expect)(responseColorsData[i].pantone_value).to.equal(fixtures.colors[i].pantone_value);\n        }\n    })",
              "err": {},
              "uuid": "bc82a852-a658-4616-8410-7b774906fe05",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get to /colors/id for an existing color should return status 200 and the color data",
              "fullTitle": "ReqRes API Get to /colors/id for an existing color should return status 200 and the color data",
              "timedOut": false,
              "duration": 381,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/colors/2',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseColorData = response.data.data;\n        (0, chai_1.expect)(responseColorData.id).to.equal(2);\n        (0, chai_1.expect)(responseColorData.name).to.equal('fuchsia rose');\n        (0, chai_1.expect)(responseColorData.year).to.equal(2001);\n        (0, chai_1.expect)(responseColorData.color).to.equal('#C74375');\n        (0, chai_1.expect)(responseColorData.pantone_value).to.equal('17-2031');\n    })",
              "err": {},
              "uuid": "310a0ec7-8cea-441e-8b6d-1c4aba0f08ae",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get to /colors/id for a color that does not exist should return status 404",
              "fullTitle": "ReqRes API Get to /colors/id for a color that does not exist should return status 404",
              "timedOut": false,
              "duration": 437,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/colors/23',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(404);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "39036d21-8eda-4c04-a940-22055bfd5230",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /users with valid data should return status 201 and the user data",
              "fullTitle": "ReqRes API POST to /users with valid data should return status 201 and the user data",
              "timedOut": false,
              "duration": 376,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            name: 'morpheus',\n            job: 'leader',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(201);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.name).to.equal(requestBody.name);\n        (0, chai_1.expect)(responseBody.job).to.equal(requestBody.job);\n        (0, chai_1.expect)(responseBody.id).to.be.a('string').and.match(oneToThreeDigits);\n        (0, chai_1.expect)(responseBody.createdAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "3ae8da35-1279-40bc-9adb-15aeedfa24de",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 367,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'put',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.name).to.equal(requestBody.name);\n        (0, chai_1.expect)(responseBody.job).to.equal(requestBody.job);\n        (0, chai_1.expect)(responseBody.updatedAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "bc85e0fa-febb-4e6d-b4ca-797a6fb20d22",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 422,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'patch',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.name).to.equal(requestBody.name);\n        (0, chai_1.expect)(responseBody.job).to.equal(requestBody.job);\n        (0, chai_1.expect)(responseBody.updatedAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "e8975f3d-9cc3-4e69-82de-2997badf502e",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE to /users/id for an existing user should return status 204",
              "fullTitle": "ReqRes API DELETE to /users/id for an existing user should return status 204",
              "timedOut": false,
              "duration": 390,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'delete',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(204);\n        (0, chai_1.expect)(response.headers['content-length']).to.equal('0');\n    })",
              "err": {},
              "uuid": "95657e94-9fea-4d29-a3fa-f9a0171b6087",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with valid data should return status 200 and the registration id and token",
              "fullTitle": "ReqRes API POST to /register with valid data should return status 200 and the registration id and token",
              "timedOut": false,
              "duration": 403,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/register',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.id).to.equal(4);\n        (0, chai_1.expect)(responseBody.token).to.equal('QpwL5tke4Pnpja7X4');\n    })",
              "err": {},
              "uuid": "404688ad-a5a4-438f-a6de-63438c7753ff",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /register with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'sydney@fife',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/register',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(400);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data.error).to.equal('Missing password');\n    })",
              "err": {},
              "uuid": "d1c6ea39-bfa6-4555-ac8d-4bfec81c9ac5",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with valid data should return status 200 and the login token",
              "fullTitle": "ReqRes API POST to /login with valid data should return status 200 and the login token",
              "timedOut": false,
              "duration": 396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/login',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data.token).to.equal('QpwL5tke4Pnpja7X4');\n    })",
              "err": {},
              "uuid": "3ed82d56-c0d1-4e45-aced-29d213282fe6",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /login with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 388,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'peter@klaven',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/login',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(400);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data.error).to.equal('Missing password');\n    })",
              "err": {},
              "uuid": "e122408d-bf27-45aa-a443-706180f75524",
              "parentUUID": "6a2d2c27-719e-43be-bc66-4fc732df90dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2095d8a6-f4ca-4c33-b585-dea9379a8f67",
            "38826f0e-c414-4964-98fa-09a86d0c11dc",
            "99dec6d1-9620-4364-9ce6-0c84baf117c1",
            "bc82a852-a658-4616-8410-7b774906fe05",
            "310a0ec7-8cea-441e-8b6d-1c4aba0f08ae",
            "39036d21-8eda-4c04-a940-22055bfd5230",
            "3ae8da35-1279-40bc-9adb-15aeedfa24de",
            "bc85e0fa-febb-4e6d-b4ca-797a6fb20d22",
            "e8975f3d-9cc3-4e69-82de-2997badf502e",
            "95657e94-9fea-4d29-a3fa-f9a0171b6087",
            "404688ad-a5a4-438f-a6de-63438c7753ff",
            "d1c6ea39-bfa6-4555-ac8d-4bfec81c9ac5",
            "3ed82d56-c0d1-4e45-aced-29d213282fe6",
            "e122408d-bf27-45aa-a443-706180f75524"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4844,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "index",
        "reportDir": "./reports",
        "charts": "true"
      },
      "version": "6.2.0"
    }
  }
}