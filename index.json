{
  "stats": {
    "suites": 4,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-27T01:40:24.174Z",
    "end": "2024-04-27T01:40:27.414Z",
    "duration": 3240,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "099b017f-45ab-41fa-b71a-af0a75c99664",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6cd4acfc-6d0b-40a0-a3a8-3cf127f21fd2",
          "title": "ReqRes API Colors endpoints",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/colors.spec.ts",
          "file": "/test/tests/colors.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ReqRes API Colors endpoints\"",
              "fullTitle": "ReqRes API Colors endpoints \"before all\" hook in \"ReqRes API Colors endpoints\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reqResClient = new reqres_client_1.ReqResClient();",
              "err": {},
              "uuid": "143c7b7b-c4f5-459a-a55d-d05b74ee2034",
              "parentUUID": "6cd4acfc-6d0b-40a0-a3a8-3cf127f21fd2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /colors should return status 200 and a list of colors",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors should return status 200 and a list of colors",
              "timedOut": false,
              "duration": 143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const expectedResponse = colors_1.colors;\n        // Act\n        const response = yield reqResClient.getColors();\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(expectedResponse);\n    })",
              "err": {},
              "uuid": "777e3802-3088-4fa7-bf93-b8244f2f37c8",
              "parentUUID": "6cd4acfc-6d0b-40a0-a3a8-3cf127f21fd2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for an existing color should return status 200 and the color data",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors/id for an existing color should return status 200 and the color data",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const expectedResponse = {\n            data: {\n                id: 2,\n                name: 'fuchsia rose',\n                year: 2001,\n                color: '#C74375',\n                pantone_value: '17-2031',\n            },\n        };\n        // Act\n        const response = yield reqResClient.getSingleColor(expectedResponse.data.id);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(expectedResponse);\n    })",
              "err": {},
              "uuid": "ab7a9806-4acd-4005-a90a-2edd7dc67290",
              "parentUUID": "6cd4acfc-6d0b-40a0-a3a8-3cf127f21fd2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for a color that does not exist should return status 404",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors/id for a color that does not exist should return status 404",
              "timedOut": false,
              "duration": 324,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const nonexistentId = 23;\n        // Act\n        const response = yield reqResClient.getSingleColor(nonexistentId);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(404);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "4e5313b4-4beb-4f14-b05d-46e61c57f95b",
              "parentUUID": "6cd4acfc-6d0b-40a0-a3a8-3cf127f21fd2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "777e3802-3088-4fa7-bf93-b8244f2f37c8",
            "ab7a9806-4acd-4005-a90a-2edd7dc67290",
            "4e5313b4-4beb-4f14-b05d-46e61c57f95b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 493,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5ef907b4-1735-49e8-9f76-ac0455927c2a",
          "title": "ReqRes API Login endpoints",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/login.spec.ts",
          "file": "/test/tests/login.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ReqRes API Login endpoints\"",
              "fullTitle": "ReqRes API Login endpoints \"before all\" hook in \"ReqRes API Login endpoints\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reqResClient = new reqres_client_1.ReqResClient();",
              "err": {},
              "uuid": "49272f0e-592d-41f8-b8fc-395107483d34",
              "parentUUID": "5ef907b4-1735-49e8-9f76-ac0455927c2a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST to /login with valid data should return status 200 and the login token",
              "fullTitle": "ReqRes API Login endpoints POST to /login with valid data should return status 200 and the login token",
              "timedOut": false,
              "duration": 381,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        const expectedResponse = {\n            token: 'QpwL5tke4Pnpja7X4',\n        };\n        // Act\n        const response = yield reqResClient.postLogin(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.equal(expectedResponse);\n    })",
              "err": {},
              "uuid": "dd2c8cf2-577f-419d-80b0-0e41f67d488d",
              "parentUUID": "5ef907b4-1735-49e8-9f76-ac0455927c2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API Login endpoints POST to /login with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 317,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'peter@klaven',\n        };\n        const expectedResponse = {\n            error: constants_1.missingPassword,\n        };\n        // Act\n        const response = yield reqResClient.postLogin(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(400);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.equal(expectedResponse);\n    })",
              "err": {},
              "uuid": "2afa422f-8785-4c5d-aa8b-7694bdb3864c",
              "parentUUID": "5ef907b4-1735-49e8-9f76-ac0455927c2a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dd2c8cf2-577f-419d-80b0-0e41f67d488d",
            "2afa422f-8785-4c5d-aa8b-7694bdb3864c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 698,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8455de0c-d832-4e0c-ac26-ca2c469b304a",
          "title": "ReqRes API Register endpoints",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/register.spec.ts",
          "file": "/test/tests/register.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ReqRes API Register endpoints\"",
              "fullTitle": "ReqRes API Register endpoints \"before all\" hook in \"ReqRes API Register endpoints\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reqResClient = new reqres_client_1.ReqResClient();",
              "err": {},
              "uuid": "50c6258f-6564-4b33-9230-d32997b1839c",
              "parentUUID": "8455de0c-d832-4e0c-ac26-ca2c469b304a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST to /register with valid data should return status 200 and the registration id and token",
              "fullTitle": "ReqRes API Register endpoints POST to /register with valid data should return status 200 and the registration id and token",
              "timedOut": false,
              "duration": 322,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        const expectedResponse = {\n            id: 4,\n            token: 'QpwL5tke4Pnpja7X4',\n        };\n        // Act\n        const response = yield reqResClient.postRegister(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.equal(expectedResponse);\n    })",
              "err": {},
              "uuid": "3306e674-a819-4582-bf89-5bfdd6eec58b",
              "parentUUID": "8455de0c-d832-4e0c-ac26-ca2c469b304a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API Register endpoints POST to /register with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'sydney@fife',\n        };\n        const expectedResponse = {\n            error: constants_1.missingPassword,\n        };\n        // Act\n        const response = yield reqResClient.postRegister(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(400);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.equal(expectedResponse);\n    })",
              "err": {},
              "uuid": "3ec7485b-de11-4efb-8837-0029003a115e",
              "parentUUID": "8455de0c-d832-4e0c-ac26-ca2c469b304a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3306e674-a819-4582-bf89-5bfdd6eec58b",
            "3ec7485b-de11-4efb-8837-0029003a115e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 641,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6393fb32-98cc-4fa6-b743-75a4685ab3aa",
          "title": "ReqRes API Users endpoints",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/users.spec.ts",
          "file": "/test/tests/users.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ReqRes API Users endpoints\"",
              "fullTitle": "ReqRes API Users endpoints \"before all\" hook in \"ReqRes API Users endpoints\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reqResClient = new reqres_client_1.ReqResClient();",
              "err": {},
              "uuid": "ad218fcf-d559-4c06-8b77-42065d8b7343",
              "parentUUID": "6393fb32-98cc-4fa6-b743-75a4685ab3aa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /users should return status 200 and a list of users",
              "fullTitle": "ReqRes API Users endpoints GET to /users should return status 200 and a list of users",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const page = 2;\n        const expectedResponse = users_1.users;\n        // Act\n        const response = yield reqResClient.getUsers(page);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(expectedResponse);\n    })",
              "err": {},
              "uuid": "c0b2ad57-c296-47b9-b5d3-032cb76cb77d",
              "parentUUID": "6393fb32-98cc-4fa6-b743-75a4685ab3aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for an existing user should return status 200 and the user data",
              "fullTitle": "ReqRes API Users endpoints GET to /users/id for an existing user should return status 200 and the user data",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const expectedResponse = {\n            data: {\n                id: 2,\n                email: 'janet.weaver@reqres.in',\n                first_name: 'Janet',\n                last_name: 'Weaver',\n                avatar: 'https://reqres.in/img/faces/2-image.jpg',\n            },\n        };\n        // Act\n        const response = yield reqResClient.getSingleUser(expectedResponse.data.id);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(expectedResponse);\n    })",
              "err": {},
              "uuid": "45fc64e9-e8ab-41d9-858b-37fc79eaa272",
              "parentUUID": "6393fb32-98cc-4fa6-b743-75a4685ab3aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for a user that does not exist should return status 404",
              "fullTitle": "ReqRes API Users endpoints GET to /users/id for a user that does not exist should return status 404",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const nonexistentId = 23;\n        // Act\n        const response = yield reqResClient.getSingleUser(nonexistentId);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(404);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "6d5b39a3-509f-4810-bf73-14a2db8e02ca",
              "parentUUID": "6393fb32-98cc-4fa6-b743-75a4685ab3aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /users with valid data should return status 201 and the user data",
              "fullTitle": "ReqRes API Users endpoints POST to /users with valid data should return status 201 and the user data",
              "timedOut": false,
              "duration": 325,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            name: 'morpheus',\n            job: 'leader',\n        };\n        // Act\n        const response = yield reqResClient.postUser(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(201);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(requestBody);\n        (0, chai_1.expect)(response.data.id).to.match(constants_1.oneToThreeDigits);\n        (0, chai_1.expect)(response.data.createdAt).to.match(constants_1.dateInISOFormat);\n    })",
              "err": {},
              "uuid": "ffec3f8e-d856-49ea-a57e-3a8736a58ce1",
              "parentUUID": "6393fb32-98cc-4fa6-b743-75a4685ab3aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API Users endpoints PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 365,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const id = 2;\n        const requestBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const response = yield reqResClient.putUser(id, requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(requestBody);\n        (0, chai_1.expect)(response.data.updatedAt).to.match(constants_1.dateInISOFormat);\n    })",
              "err": {},
              "uuid": "5e69cfa6-5007-49c3-976c-4dd1d9e0b5a0",
              "parentUUID": "6393fb32-98cc-4fa6-b743-75a4685ab3aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API Users endpoints PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 320,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const id = 2;\n        const requestBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const response = yield reqResClient.patchUser(id, requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(requestBody);\n        (0, chai_1.expect)(response.data.updatedAt).to.match(constants_1.dateInISOFormat);\n    })",
              "err": {},
              "uuid": "87db55dd-e6a6-4a01-a0c7-568bb3fb25e7",
              "parentUUID": "6393fb32-98cc-4fa6-b743-75a4685ab3aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE to /users/id for an existing user should return status 204",
              "fullTitle": "ReqRes API Users endpoints DELETE to /users/id for an existing user should return status 204",
              "timedOut": false,
              "duration": 312,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const id = 2;\n        // Act\n        const response = yield reqResClient.deleteUser(id);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(204);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentLength]).to.equal('0');\n    })",
              "err": {},
              "uuid": "66805f34-7211-4e07-942c-50197102bfa1",
              "parentUUID": "6393fb32-98cc-4fa6-b743-75a4685ab3aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c0b2ad57-c296-47b9-b5d3-032cb76cb77d",
            "45fc64e9-e8ab-41d9-858b-37fc79eaa272",
            "6d5b39a3-509f-4810-bf73-14a2db8e02ca",
            "ffec3f8e-d856-49ea-a57e-3a8736a58ce1",
            "5e69cfa6-5007-49c3-976c-4dd1d9e0b5a0",
            "87db55dd-e6a6-4a01-a0c7-568bb3fb25e7",
            "66805f34-7211-4e07-942c-50197102bfa1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1399,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "index",
        "reportDir": "./reports",
        "charts": "true"
      },
      "version": "6.2.0"
    }
  }
}