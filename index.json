{
  "stats": {
    "suites": 4,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-27T01:10:31.045Z",
    "end": "2024-04-27T01:10:33.075Z",
    "duration": 2030,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9096d603-49f6-45c3-a2f0-54da046fb888",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "65331581-d7eb-46c8-b048-97cc7cd1bd3a",
          "title": "ReqRes API Colors endpoints",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/colors.spec.ts",
          "file": "/test/tests/colors.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ReqRes API Colors endpoints\"",
              "fullTitle": "ReqRes API Colors endpoints \"before all\" hook in \"ReqRes API Colors endpoints\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reqResClient = new reqres_client_1.ReqResClient();",
              "err": {},
              "uuid": "4e18f08d-890f-4456-aa40-1f688db444b0",
              "parentUUID": "65331581-d7eb-46c8-b048-97cc7cd1bd3a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /colors should return status 200 and a list of colors",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors should return status 200 and a list of colors",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const expectedResponse = colors_1.colors;\n        // Act\n        const response = yield reqResClient.getColors();\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(expectedResponse);\n    })",
              "err": {},
              "uuid": "53e6235a-21b1-43ca-9766-435b99552a86",
              "parentUUID": "65331581-d7eb-46c8-b048-97cc7cd1bd3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for an existing color should return status 200 and the color data",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors/id for an existing color should return status 200 and the color data",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const expectedResponse = {\n            data: {\n                id: 2,\n                name: 'fuchsia rose',\n                year: 2001,\n                color: '#C74375',\n                pantone_value: '17-2031',\n            },\n        };\n        // Act\n        const response = yield reqResClient.getSingleColor(expectedResponse.data.id);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(expectedResponse);\n    })",
              "err": {},
              "uuid": "62bede6b-0e64-40a1-a1b7-2fed896eae33",
              "parentUUID": "65331581-d7eb-46c8-b048-97cc7cd1bd3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for a color that does not exist should return status 404",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors/id for a color that does not exist should return status 404",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const nonexistentId = 23;\n        // Act\n        const response = yield reqResClient.getSingleColor(nonexistentId);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(404);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "7ebbd3d3-3a69-49b2-917b-be21d1e917ec",
              "parentUUID": "65331581-d7eb-46c8-b048-97cc7cd1bd3a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "53e6235a-21b1-43ca-9766-435b99552a86",
            "62bede6b-0e64-40a1-a1b7-2fed896eae33",
            "7ebbd3d3-3a69-49b2-917b-be21d1e917ec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 140,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "365433f8-e6e3-467c-bb2f-4ddde4d1f3a3",
          "title": "ReqRes API Login endpoints",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/login.spec.ts",
          "file": "/test/tests/login.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ReqRes API Login endpoints\"",
              "fullTitle": "ReqRes API Login endpoints \"before all\" hook in \"ReqRes API Login endpoints\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reqResClient = new reqres_client_1.ReqResClient();",
              "err": {},
              "uuid": "f4b312e0-1924-4473-bf11-c4c6d83c7d62",
              "parentUUID": "365433f8-e6e3-467c-bb2f-4ddde4d1f3a3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST to /login with valid data should return status 200 and the login token",
              "fullTitle": "ReqRes API Login endpoints POST to /login with valid data should return status 200 and the login token",
              "timedOut": false,
              "duration": 274,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        const expectedResponse = {\n            token: 'QpwL5tke4Pnpja7X4',\n        };\n        // Act\n        const response = yield reqResClient.postLogin(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.equal(expectedResponse);\n    })",
              "err": {},
              "uuid": "42eb8f54-c5bd-47c3-b440-30b55edcd0a2",
              "parentUUID": "365433f8-e6e3-467c-bb2f-4ddde4d1f3a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API Login endpoints POST to /login with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'peter@klaven',\n        };\n        const expectedResponse = {\n            error: constants_1.missingPassword,\n        };\n        // Act\n        const response = yield reqResClient.postLogin(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(400);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.equal(expectedResponse);\n    })",
              "err": {},
              "uuid": "05c5cd7d-70ce-4afc-ad80-4cbe934bac8c",
              "parentUUID": "365433f8-e6e3-467c-bb2f-4ddde4d1f3a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "42eb8f54-c5bd-47c3-b440-30b55edcd0a2",
            "05c5cd7d-70ce-4afc-ad80-4cbe934bac8c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 496,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3c4aae72-aecf-4c49-9a6d-1629776c45f0",
          "title": "ReqRes API Register endpoints",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/register.spec.ts",
          "file": "/test/tests/register.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ReqRes API Register endpoints\"",
              "fullTitle": "ReqRes API Register endpoints \"before all\" hook in \"ReqRes API Register endpoints\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reqResClient = new reqres_client_1.ReqResClient();",
              "err": {},
              "uuid": "37bf016c-33ec-4e07-b158-39de0b6b9693",
              "parentUUID": "3c4aae72-aecf-4c49-9a6d-1629776c45f0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST to /register with valid data should return status 200 and the registration id and token",
              "fullTitle": "ReqRes API Register endpoints POST to /register with valid data should return status 200 and the registration id and token",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        const expectedResponse = {\n            id: 4,\n            token: 'QpwL5tke4Pnpja7X4',\n        };\n        // Act\n        const response = yield reqResClient.postRegister(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.equal(expectedResponse);\n    })",
              "err": {},
              "uuid": "c751443c-a9f6-4846-ae5d-5a3388c34a2c",
              "parentUUID": "3c4aae72-aecf-4c49-9a6d-1629776c45f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API Register endpoints POST to /register with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'sydney@fife',\n        };\n        const expectedResponse = {\n            error: constants_1.missingPassword,\n        };\n        // Act\n        const response = yield reqResClient.postRegister(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(400);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.equal(expectedResponse);\n    })",
              "err": {},
              "uuid": "51670d4f-4617-430a-a202-c21fa7ceb9a1",
              "parentUUID": "3c4aae72-aecf-4c49-9a6d-1629776c45f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c751443c-a9f6-4846-ae5d-5a3388c34a2c",
            "51670d4f-4617-430a-a202-c21fa7ceb9a1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 434,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c10c2c07-89f2-4925-bd2a-684276aa8159",
          "title": "ReqRes API Users endpoints",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/users.spec.ts",
          "file": "/test/tests/users.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ReqRes API Users endpoints\"",
              "fullTitle": "ReqRes API Users endpoints \"before all\" hook in \"ReqRes API Users endpoints\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reqResClient = new reqres_client_1.ReqResClient();",
              "err": {},
              "uuid": "d347bb01-4478-470c-a9da-84f635afc68a",
              "parentUUID": "c10c2c07-89f2-4925-bd2a-684276aa8159",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /users should return status 200 and a list of users",
              "fullTitle": "ReqRes API Users endpoints GET to /users should return status 200 and a list of users",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const page = 2;\n        const expectedResponse = users_1.users;\n        // Act\n        const response = yield reqResClient.getUsers(page);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(expectedResponse);\n    })",
              "err": {},
              "uuid": "184005c2-24f6-449b-a0f2-cde44428a17b",
              "parentUUID": "c10c2c07-89f2-4925-bd2a-684276aa8159",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for an existing user should return status 200 and the user data",
              "fullTitle": "ReqRes API Users endpoints GET to /users/id for an existing user should return status 200 and the user data",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const expectedResponse = {\n            data: {\n                id: 2,\n                email: 'janet.weaver@reqres.in',\n                first_name: 'Janet',\n                last_name: 'Weaver',\n                avatar: 'https://reqres.in/img/faces/2-image.jpg',\n            },\n        };\n        // Act\n        const response = yield reqResClient.getSingleUser(expectedResponse.data.id);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(expectedResponse);\n    })",
              "err": {},
              "uuid": "72d631d6-e08f-4656-9f2b-a7502fbbb519",
              "parentUUID": "c10c2c07-89f2-4925-bd2a-684276aa8159",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for a user that does not exist should return status 404",
              "fullTitle": "ReqRes API Users endpoints GET to /users/id for a user that does not exist should return status 404",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const nonexistentId = 23;\n        // Act\n        const response = yield reqResClient.getSingleUser(nonexistentId);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(404);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "87d54564-1887-4479-900c-02ac72108f96",
              "parentUUID": "c10c2c07-89f2-4925-bd2a-684276aa8159",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /users with valid data should return status 201 and the user data",
              "fullTitle": "ReqRes API Users endpoints POST to /users with valid data should return status 201 and the user data",
              "timedOut": false,
              "duration": 257,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            name: 'morpheus',\n            job: 'leader',\n        };\n        // Act\n        const response = yield reqResClient.postUser(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(201);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(requestBody);\n        (0, chai_1.expect)(response.data.id).to.match(constants_1.oneToThreeDigits);\n        (0, chai_1.expect)(response.data.createdAt).to.match(constants_1.dateInISOFormat);\n    })",
              "err": {},
              "uuid": "7b391bce-e79e-4691-9ba4-24ec89571f71",
              "parentUUID": "c10c2c07-89f2-4925-bd2a-684276aa8159",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API Users endpoints PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const id = 2;\n        const requestBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const response = yield reqResClient.putUser(id, requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(requestBody);\n        (0, chai_1.expect)(response.data.updatedAt).to.match(constants_1.dateInISOFormat);\n    })",
              "err": {},
              "uuid": "bccdf9f4-5c76-4727-8637-70b40006559c",
              "parentUUID": "c10c2c07-89f2-4925-bd2a-684276aa8159",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API Users endpoints PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 212,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const id = 2;\n        const requestBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const response = yield reqResClient.patchUser(id, requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(requestBody);\n        (0, chai_1.expect)(response.data.updatedAt).to.match(constants_1.dateInISOFormat);\n    })",
              "err": {},
              "uuid": "5e8933ec-b486-43ab-8fe3-b2bdd2510b04",
              "parentUUID": "c10c2c07-89f2-4925-bd2a-684276aa8159",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE to /users/id for an existing user should return status 204",
              "fullTitle": "ReqRes API Users endpoints DELETE to /users/id for an existing user should return status 204",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const id = 2;\n        // Act\n        const response = yield reqResClient.deleteUser(id);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(204);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentLength]).to.equal('0');\n    })",
              "err": {},
              "uuid": "7c7e3608-1906-48ee-9185-fe3a6879b9c7",
              "parentUUID": "c10c2c07-89f2-4925-bd2a-684276aa8159",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "184005c2-24f6-449b-a0f2-cde44428a17b",
            "72d631d6-e08f-4656-9f2b-a7502fbbb519",
            "87d54564-1887-4479-900c-02ac72108f96",
            "7b391bce-e79e-4691-9ba4-24ec89571f71",
            "bccdf9f4-5c76-4727-8637-70b40006559c",
            "5e8933ec-b486-43ab-8fe3-b2bdd2510b04",
            "7c7e3608-1906-48ee-9185-fe3a6879b9c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 951,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "index",
        "reportDir": "./reports",
        "charts": "true"
      },
      "version": "6.2.0"
    }
  }
}