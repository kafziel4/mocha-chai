{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2022-05-29T04:26:21.887Z",
    "end": "2022-05-29T04:26:26.421Z",
    "duration": 4534,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9aaa8ffe-f6c6-477f-a968-f5f7ca46a7c2",
      "title": "",
      "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/reqres.spec.ts",
      "file": "/test/tests/reqres.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
          "title": "ReqRes API",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/reqres.spec.ts",
          "file": "/test/tests/reqres.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /users should return status 200 and a list of users",
              "fullTitle": "ReqRes API GET to /users should return status 200 and a list of users",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users',\n            method: 'get',\n            params: { page: 2 },\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.page).to.equal(2);\n        (0, chai_1.expect)(responseBody.per_page).to.equal(6);\n        (0, chai_1.expect)(responseBody.total).to.equal(12);\n        (0, chai_1.expect)(responseBody.total_pages).to.equal(2);\n        (0, chai_1.expect)(responseBody.data).to.have.lengthOf(6);\n        for (let i = 0; i < fixtures.users.length; i += 1) {\n            const responseUsersData = responseBody.data;\n            (0, chai_1.expect)(responseUsersData[i].id).to.equal(fixtures.users[i].id);\n            (0, chai_1.expect)(responseUsersData[i].email).to.equal(fixtures.users[i].email);\n            (0, chai_1.expect)(responseUsersData[i].first_name).to.equal(fixtures.users[i].first_name);\n            (0, chai_1.expect)(responseUsersData[i].last_name).to.equal(fixtures.users[i].last_name);\n            (0, chai_1.expect)(responseUsersData[i].avatar).to.equal(fixtures.users[i].avatar);\n        }\n    })",
              "err": {},
              "uuid": "ec718dcf-59cf-4faa-8396-b5506c139cd9",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for an existing user should return status 200 and the user data",
              "fullTitle": "ReqRes API GET to /users/id for an existing user should return status 200 and the user data",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseUserData = response.data.data;\n        (0, chai_1.expect)(responseUserData.id).to.equal(2);\n        (0, chai_1.expect)(responseUserData.email).to.equal('janet.weaver@reqres.in');\n        (0, chai_1.expect)(responseUserData.first_name).to.equal('Janet');\n        (0, chai_1.expect)(responseUserData.last_name).to.equal('Weaver');\n        (0, chai_1.expect)(responseUserData.avatar).to.equal('https://reqres.in/img/faces/2-image.jpg');\n    })",
              "err": {},
              "uuid": "648986a2-da25-480b-a289-5753c3da26e4",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for a user that does not exist should return status 404",
              "fullTitle": "ReqRes API GET to /users/id for a user that does not exist should return status 404",
              "timedOut": false,
              "duration": 357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/23',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(404);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "f708d9f5-8260-482f-9f1a-a1715c5fae52",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors should return status 200 and a list of colors",
              "fullTitle": "ReqRes API GET to /colors should return status 200 and a list of colors",
              "timedOut": false,
              "duration": 348,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/colors',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.page).to.equal(1);\n        (0, chai_1.expect)(responseBody.per_page).to.equal(6);\n        (0, chai_1.expect)(responseBody.total).to.equal(12);\n        (0, chai_1.expect)(responseBody.total_pages).to.equal(2);\n        (0, chai_1.expect)(responseBody.data).to.have.lengthOf(6);\n        for (let i = 0; i < fixtures.colors.length; i += 1) {\n            const responseColorsData = responseBody.data;\n            (0, chai_1.expect)(responseColorsData[i].id).to.equal(fixtures.colors[i].id);\n            (0, chai_1.expect)(responseColorsData[i].name).to.equal(fixtures.colors[i].name);\n            (0, chai_1.expect)(responseColorsData[i].year).to.equal(fixtures.colors[i].year);\n            (0, chai_1.expect)(responseColorsData[i].color).to.equal(fixtures.colors[i].color);\n            (0, chai_1.expect)(responseColorsData[i].pantone_value).to.equal(fixtures.colors[i].pantone_value);\n        }\n    })",
              "err": {},
              "uuid": "71b39ce4-2d1a-4a54-9d28-de467c37bbe7",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for an existing color should return status 200 and the color data",
              "fullTitle": "ReqRes API GET to /colors/id for an existing color should return status 200 and the color data",
              "timedOut": false,
              "duration": 369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/colors/2',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseColorData = response.data.data;\n        (0, chai_1.expect)(responseColorData.id).to.equal(2);\n        (0, chai_1.expect)(responseColorData.name).to.equal('fuchsia rose');\n        (0, chai_1.expect)(responseColorData.year).to.equal(2001);\n        (0, chai_1.expect)(responseColorData.color).to.equal('#C74375');\n        (0, chai_1.expect)(responseColorData.pantone_value).to.equal('17-2031');\n    })",
              "err": {},
              "uuid": "daea5b6c-192b-43ff-bc26-6c20d61d53b8",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for a color that does not exist should return status 404",
              "fullTitle": "ReqRes API GET to /colors/id for a color that does not exist should return status 404",
              "timedOut": false,
              "duration": 361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/colors/23',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(404);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "0ec5a4e9-e230-4cc3-a73b-c08e5fa35bb0",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /users with valid data should return status 201 and the user data",
              "fullTitle": "ReqRes API POST to /users with valid data should return status 201 and the user data",
              "timedOut": false,
              "duration": 359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            name: 'morpheus',\n            job: 'leader',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(201);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.name).to.equal(requestBody.name);\n        (0, chai_1.expect)(responseBody.job).to.equal(requestBody.job);\n        (0, chai_1.expect)(responseBody.id).to.be.a('string').and.match(oneToThreeDigits);\n        (0, chai_1.expect)(responseBody.createdAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "24543b40-7742-4210-aeaa-aa44a0ad4712",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 374,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'put',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.name).to.equal(requestBody.name);\n        (0, chai_1.expect)(responseBody.job).to.equal(requestBody.job);\n        (0, chai_1.expect)(responseBody.updatedAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "68380b00-3261-4f77-be27-01214d582545",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 370,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'patch',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.name).to.equal(requestBody.name);\n        (0, chai_1.expect)(responseBody.job).to.equal(requestBody.job);\n        (0, chai_1.expect)(responseBody.updatedAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "43791dc1-83d1-4863-b040-7f768b39b812",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE to /users/id for an existing user should return status 204",
              "fullTitle": "ReqRes API DELETE to /users/id for an existing user should return status 204",
              "timedOut": false,
              "duration": 388,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'delete',\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(204);\n        (0, chai_1.expect)(response.headers['content-length']).to.equal('0');\n    })",
              "err": {},
              "uuid": "2ac9f732-ab29-48f5-aeab-a25743e0c0d8",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with valid data should return status 200 and the registration id and token",
              "fullTitle": "ReqRes API POST to /register with valid data should return status 200 and the registration id and token",
              "timedOut": false,
              "duration": 361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/register',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const responseBody = response.data;\n        (0, chai_1.expect)(responseBody.id).to.equal(4);\n        (0, chai_1.expect)(responseBody.token).to.equal('QpwL5tke4Pnpja7X4');\n    })",
              "err": {},
              "uuid": "b5726939-53e1-442c-a437-0c958ff3e5e6",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /register with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 381,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'sydney@fife',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/register',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(400);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data.error).to.equal('Missing password');\n    })",
              "err": {},
              "uuid": "23fc43c7-95db-49f1-b35d-302d9ed692ba",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with valid data should return status 200 and the login token",
              "fullTitle": "ReqRes API POST to /login with valid data should return status 200 and the login token",
              "timedOut": false,
              "duration": 359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/login',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data.token).to.equal('QpwL5tke4Pnpja7X4');\n    })",
              "err": {},
              "uuid": "18dc9fa9-319d-4de2-8995-b0be714ed389",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /login with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 340,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'peter@klaven',\n        };\n        // Act\n        const response = yield (0, axios_1.default)({\n            url: '/login',\n            method: 'post',\n            data: requestBody,\n        });\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(400);\n        (0, chai_1.expect)(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(response.data.error).to.equal('Missing password');\n    })",
              "err": {},
              "uuid": "0789bf4d-bf71-4453-91eb-c0575b5afa04",
              "parentUUID": "335eda8b-2910-489d-b08c-3bdc7c9788dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec718dcf-59cf-4faa-8396-b5506c139cd9",
            "648986a2-da25-480b-a289-5753c3da26e4",
            "f708d9f5-8260-482f-9f1a-a1715c5fae52",
            "71b39ce4-2d1a-4a54-9d28-de467c37bbe7",
            "daea5b6c-192b-43ff-bc26-6c20d61d53b8",
            "0ec5a4e9-e230-4cc3-a73b-c08e5fa35bb0",
            "24543b40-7742-4210-aeaa-aa44a0ad4712",
            "68380b00-3261-4f77-be27-01214d582545",
            "43791dc1-83d1-4863-b040-7f768b39b812",
            "2ac9f732-ab29-48f5-aeab-a25743e0c0d8",
            "b5726939-53e1-442c-a437-0c958ff3e5e6",
            "23fc43c7-95db-49f1-b35d-302d9ed692ba",
            "18dc9fa9-319d-4de2-8995-b0be714ed389",
            "0789bf4d-bf71-4453-91eb-c0575b5afa04"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4516,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "index",
        "reportDir": "./reports",
        "charts": "true"
      },
      "version": "6.2.0"
    }
  }
}