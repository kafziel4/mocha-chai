{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2022-05-23T01:20:01.182Z",
    "end": "2022-05-23T01:20:04.295Z",
    "duration": 3113,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3fc45361-7a4c-4e29-bc6d-fa64f752d270",
      "title": "",
      "fullFile": "/home/runner/work/mocha-chai/mocha-chai/test/tests/reqres.spec.ts",
      "file": "/test/tests/reqres.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "27c519da-f077-430d-9eda-f39db279a604",
          "title": "ReqRes API",
          "fullFile": "/home/runner/work/mocha-chai/mocha-chai/test/tests/reqres.spec.ts",
          "file": "/test/tests/reqres.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /users should return status 200 and a list of users",
              "fullTitle": "ReqRes API GET to /users should return status 200 and a list of users",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users',\n            method: 'get',\n            params: { page: 2 },\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBody = res.data;\n        (0, chai_1.expect)(resBody.page).to.equal(2);\n        (0, chai_1.expect)(resBody.per_page).to.equal(6);\n        (0, chai_1.expect)(resBody.total).to.equal(12);\n        (0, chai_1.expect)(resBody.total_pages).to.equal(2);\n        (0, chai_1.expect)(resBody.data).to.have.lengthOf(6);\n        for (let i = 0; i < fixtures.users.length; i += 1) {\n            const resBodyData = resBody.data;\n            (0, chai_1.expect)(resBodyData[i].id).to.equal(fixtures.users[i].id);\n            (0, chai_1.expect)(resBodyData[i].email).to.equal(fixtures.users[i].email);\n            (0, chai_1.expect)(resBodyData[i].first_name).to.equal(fixtures.users[i].first_name);\n            (0, chai_1.expect)(resBodyData[i].last_name).to.equal(fixtures.users[i].last_name);\n            (0, chai_1.expect)(resBodyData[i].avatar).to.equal(fixtures.users[i].avatar);\n        }\n    })",
              "err": {},
              "uuid": "31e5ea2e-7fc5-4000-ba87-3ee48225d333",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for an existing user should return status 200 and the user data",
              "fullTitle": "ReqRes API GET to /users/id for an existing user should return status 200 and the user data",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBodyData = res.data.data;\n        (0, chai_1.expect)(resBodyData.id).to.equal(2);\n        (0, chai_1.expect)(resBodyData.email).to.equal('janet.weaver@reqres.in');\n        (0, chai_1.expect)(resBodyData.first_name).to.equal('Janet');\n        (0, chai_1.expect)(resBodyData.last_name).to.equal('Weaver');\n        (0, chai_1.expect)(resBodyData.avatar).to.equal('https://reqres.in/img/faces/2-image.jpg');\n    })",
              "err": {},
              "uuid": "5cf44257-93d3-476f-9488-a49d17a9f581",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for a user that does not exist should return status 404",
              "fullTitle": "ReqRes API GET to /users/id for a user that does not exist should return status 404",
              "timedOut": false,
              "duration": 233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users/23',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(404);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(res.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "474588b9-1925-4de2-8461-899bd5a0b765",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get to /colors should return status 200 and a list of colors",
              "fullTitle": "ReqRes API Get to /colors should return status 200 and a list of colors",
              "timedOut": false,
              "duration": 284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/colors',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBody = res.data;\n        (0, chai_1.expect)(resBody.page).to.equal(1);\n        (0, chai_1.expect)(resBody.per_page).to.equal(6);\n        (0, chai_1.expect)(resBody.total).to.equal(12);\n        (0, chai_1.expect)(resBody.total_pages).to.equal(2);\n        (0, chai_1.expect)(resBody.data).to.have.lengthOf(6);\n        for (let i = 0; i < fixtures.colors.length; i += 1) {\n            const resBodyData = resBody.data;\n            (0, chai_1.expect)(resBodyData[i].id).to.equal(fixtures.colors[i].id);\n            (0, chai_1.expect)(resBodyData[i].name).to.equal(fixtures.colors[i].name);\n            (0, chai_1.expect)(resBodyData[i].year).to.equal(fixtures.colors[i].year);\n            (0, chai_1.expect)(resBodyData[i].color).to.equal(fixtures.colors[i].color);\n            (0, chai_1.expect)(resBodyData[i].pantone_value).to.equal(fixtures.colors[i].pantone_value);\n        }\n    })",
              "err": {},
              "uuid": "320f7d9c-c53b-4a8d-97b7-d87748e18b2d",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get to /colors/id for an existing color should return status 200 and the color data",
              "fullTitle": "ReqRes API Get to /colors/id for an existing color should return status 200 and the color data",
              "timedOut": false,
              "duration": 243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/colors/2',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBodyData = res.data.data;\n        (0, chai_1.expect)(resBodyData.id).to.equal(2);\n        (0, chai_1.expect)(resBodyData.name).to.equal('fuchsia rose');\n        (0, chai_1.expect)(resBodyData.year).to.equal(2001);\n        (0, chai_1.expect)(resBodyData.color).to.equal('#C74375');\n        (0, chai_1.expect)(resBodyData.pantone_value).to.equal('17-2031');\n    })",
              "err": {},
              "uuid": "7328dbd4-5542-4c67-8319-75c965ac1322",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get to /colors/id for a color that does not exist should return status 404",
              "fullTitle": "ReqRes API Get to /colors/id for a color that does not exist should return status 404",
              "timedOut": false,
              "duration": 228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/colors/23',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(404);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(res.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "219e8feb-96d7-4aeb-9c99-6d8298eb8eba",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /users with valid data should return status 201 and the user data",
              "fullTitle": "ReqRes API POST to /users with valid data should return status 201 and the user data",
              "timedOut": false,
              "duration": 247,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            name: 'morpheus',\n            job: 'leader',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users',\n            method: 'post',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(201);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBody = res.data;\n        (0, chai_1.expect)(resBody.name).to.equal(reqBody.name);\n        (0, chai_1.expect)(resBody.job).to.equal(reqBody.job);\n        (0, chai_1.expect)(resBody.id).to.be.a('string').and.match(oneToThreeDigits);\n        (0, chai_1.expect)(resBody.createdAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "0a78c8c5-8f7d-4acf-a0b4-db023d263170",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'put',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBody = res.data;\n        (0, chai_1.expect)(resBody.name).to.equal(reqBody.name);\n        (0, chai_1.expect)(resBody.job).to.equal(reqBody.job);\n        (0, chai_1.expect)(resBody.updatedAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "4e201dfc-8497-47fa-8d56-24d0d9932312",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'patch',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBody = res.data;\n        (0, chai_1.expect)(resBody.name).to.equal(reqBody.name);\n        (0, chai_1.expect)(resBody.job).to.equal(reqBody.job);\n        (0, chai_1.expect)(resBody.updatedAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "1f29b46f-6fdf-46f4-854b-8c44224ec2a0",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE to /users/id for an existing user should return status 204",
              "fullTitle": "ReqRes API DELETE to /users/id for an existing user should return status 204",
              "timedOut": false,
              "duration": 259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'delete',\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(204);\n        (0, chai_1.expect)(res.headers['content-length']).to.equal('0');\n    })",
              "err": {},
              "uuid": "0a714991-6c88-4fc8-912e-cf56a9755f89",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with valid data should return status 200 and the registration id and token",
              "fullTitle": "ReqRes API POST to /register with valid data should return status 200 and the registration id and token",
              "timedOut": false,
              "duration": 231,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/register',\n            method: 'post',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBody = res.data;\n        (0, chai_1.expect)(resBody.id).to.equal(4);\n        (0, chai_1.expect)(resBody.token).to.equal('QpwL5tke4Pnpja7X4');\n    })",
              "err": {},
              "uuid": "08fe7186-8412-48d7-9abb-0447be19b30b",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /register with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            email: 'sydney@fife',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/register',\n            method: 'post',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(400);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(res.data.error).to.equal('Missing password');\n    })",
              "err": {},
              "uuid": "fcf5721a-f114-47f5-8f34-87f6db9a1022",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with valid data should return status 200 and the login token",
              "fullTitle": "ReqRes API POST to /login with valid data should return status 200 and the login token",
              "timedOut": false,
              "duration": 245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/login',\n            method: 'post',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(res.data.token).to.equal('QpwL5tke4Pnpja7X4');\n    })",
              "err": {},
              "uuid": "09166341-04a2-4387-9c45-f1f7b76a779d",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /login with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            email: 'peter@klaven',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/login',\n            method: 'post',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(400);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(res.data.error).to.equal('Missing password');\n    })",
              "err": {},
              "uuid": "eeda30e9-32ae-4f0e-b203-72436bfcef37",
              "parentUUID": "27c519da-f077-430d-9eda-f39db279a604",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31e5ea2e-7fc5-4000-ba87-3ee48225d333",
            "5cf44257-93d3-476f-9488-a49d17a9f581",
            "474588b9-1925-4de2-8461-899bd5a0b765",
            "320f7d9c-c53b-4a8d-97b7-d87748e18b2d",
            "7328dbd4-5542-4c67-8319-75c965ac1322",
            "219e8feb-96d7-4aeb-9c99-6d8298eb8eba",
            "0a78c8c5-8f7d-4acf-a0b4-db023d263170",
            "4e201dfc-8497-47fa-8d56-24d0d9932312",
            "1f29b46f-6fdf-46f4-854b-8c44224ec2a0",
            "0a714991-6c88-4fc8-912e-cf56a9755f89",
            "08fe7186-8412-48d7-9abb-0447be19b30b",
            "fcf5721a-f114-47f5-8f34-87f6db9a1022",
            "09166341-04a2-4387-9c45-f1f7b76a779d",
            "eeda30e9-32ae-4f0e-b203-72436bfcef37"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3094,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "index",
        "reportDir": "./reports",
        "charts": "true"
      },
      "version": "6.2.0"
    }
  }
}