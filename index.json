{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2022-05-23T01:05:43.801Z",
    "end": "2022-05-23T01:05:48.524Z",
    "duration": 4723,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "aafc9ddb-af92-40a6-908e-23a378a37262",
      "title": "",
      "fullFile": "/home/runner/work/mocha-chai/mocha-chai/test/tests/reqres.spec.ts",
      "file": "/test/tests/reqres.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
          "title": "ReqRes API",
          "fullFile": "/home/runner/work/mocha-chai/mocha-chai/test/tests/reqres.spec.ts",
          "file": "/test/tests/reqres.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /users should return status 200 and a list of users",
              "fullTitle": "ReqRes API GET to /users should return status 200 and a list of users",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users',\n            method: 'get',\n            params: { page: 2 },\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBody = res.data;\n        (0, chai_1.expect)(resBody.page).to.equal(2);\n        (0, chai_1.expect)(resBody.per_page).to.equal(6);\n        (0, chai_1.expect)(resBody.total).to.equal(12);\n        (0, chai_1.expect)(resBody.total_pages).to.equal(2);\n        (0, chai_1.expect)(resBody.data).to.have.lengthOf(6);\n        for (let i = 0; i < fixtures.users.length; i += 1) {\n            const resBodyData = resBody.data;\n            (0, chai_1.expect)(resBodyData[i].id).to.equal(fixtures.users[i].id);\n            (0, chai_1.expect)(resBodyData[i].email).to.equal(fixtures.users[i].email);\n            (0, chai_1.expect)(resBodyData[i].first_name).to.equal(fixtures.users[i].first_name);\n            (0, chai_1.expect)(resBodyData[i].last_name).to.equal(fixtures.users[i].last_name);\n            (0, chai_1.expect)(resBodyData[i].avatar).to.equal(fixtures.users[i].avatar);\n        }\n    })",
              "err": {},
              "uuid": "d763f591-7559-4fed-9b8d-3034d7169382",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for an existing user should return status 200 and the user data",
              "fullTitle": "ReqRes API GET to /users/id for an existing user should return status 200 and the user data",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBodyData = res.data.data;\n        (0, chai_1.expect)(resBodyData.id).to.equal(2);\n        (0, chai_1.expect)(resBodyData.email).to.equal('janet.weaver@reqres.in');\n        (0, chai_1.expect)(resBodyData.first_name).to.equal('Janet');\n        (0, chai_1.expect)(resBodyData.last_name).to.equal('Weaver');\n        (0, chai_1.expect)(resBodyData.avatar).to.equal('https://reqres.in/img/faces/2-image.jpg');\n    })",
              "err": {},
              "uuid": "14dc5fa1-9118-4063-8c9e-e5af48063ffd",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for a user that does not exist should return status 404",
              "fullTitle": "ReqRes API GET to /users/id for a user that does not exist should return status 404",
              "timedOut": false,
              "duration": 373,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users/23',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(404);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(res.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "4576ac68-e1cb-4dd1-ac19-443fdbed852c",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get to /colors should return status 200 and a list of colors",
              "fullTitle": "ReqRes API Get to /colors should return status 200 and a list of colors",
              "timedOut": false,
              "duration": 357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/colors',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBody = res.data;\n        (0, chai_1.expect)(resBody.page).to.equal(1);\n        (0, chai_1.expect)(resBody.per_page).to.equal(6);\n        (0, chai_1.expect)(resBody.total).to.equal(12);\n        (0, chai_1.expect)(resBody.total_pages).to.equal(2);\n        (0, chai_1.expect)(resBody.data).to.have.lengthOf(6);\n        for (let i = 0; i < fixtures.colors.length; i += 1) {\n            const resBodyData = resBody.data;\n            (0, chai_1.expect)(resBodyData[i].id).to.equal(fixtures.colors[i].id);\n            (0, chai_1.expect)(resBodyData[i].name).to.equal(fixtures.colors[i].name);\n            (0, chai_1.expect)(resBodyData[i].year).to.equal(fixtures.colors[i].year);\n            (0, chai_1.expect)(resBodyData[i].color).to.equal(fixtures.colors[i].color);\n            (0, chai_1.expect)(resBodyData[i].pantone_value).to.equal(fixtures.colors[i].pantone_value);\n        }\n    })",
              "err": {},
              "uuid": "6b6a3402-0465-4f36-a478-68e12524d804",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get to /colors/id for an existing color should return status 200 and the color data",
              "fullTitle": "ReqRes API Get to /colors/id for an existing color should return status 200 and the color data",
              "timedOut": false,
              "duration": 419,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/colors/2',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBodyData = res.data.data;\n        (0, chai_1.expect)(resBodyData.id).to.equal(2);\n        (0, chai_1.expect)(resBodyData.name).to.equal('fuchsia rose');\n        (0, chai_1.expect)(resBodyData.year).to.equal(2001);\n        (0, chai_1.expect)(resBodyData.color).to.equal('#C74375');\n        (0, chai_1.expect)(resBodyData.pantone_value).to.equal('17-2031');\n    })",
              "err": {},
              "uuid": "928e3fa6-46a8-4ea1-8ec7-cbc00c2881f8",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get to /colors/id for a color that does not exist should return status 404",
              "fullTitle": "ReqRes API Get to /colors/id for a color that does not exist should return status 404",
              "timedOut": false,
              "duration": 414,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/colors/23',\n            method: 'get',\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(404);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(res.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "86ad40ed-0893-465f-9326-7e3e1f64a4b4",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /users with valid data should return status 201 and the user data",
              "fullTitle": "ReqRes API POST to /users with valid data should return status 201 and the user data",
              "timedOut": false,
              "duration": 381,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            name: 'morpheus',\n            job: 'leader',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users',\n            method: 'post',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(201);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBody = res.data;\n        (0, chai_1.expect)(resBody.name).to.equal(reqBody.name);\n        (0, chai_1.expect)(resBody.job).to.equal(reqBody.job);\n        (0, chai_1.expect)(resBody.id).to.be.a('string').and.match(oneToThreeDigits);\n        (0, chai_1.expect)(resBody.createdAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "506d5113-06f3-4870-b2cb-5922ce0484e7",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'put',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBody = res.data;\n        (0, chai_1.expect)(resBody.name).to.equal(reqBody.name);\n        (0, chai_1.expect)(resBody.job).to.equal(reqBody.job);\n        (0, chai_1.expect)(resBody.updatedAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "6f9378da-77ec-4db8-9da5-67a7bbd15e3e",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 409,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'patch',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBody = res.data;\n        (0, chai_1.expect)(resBody.name).to.equal(reqBody.name);\n        (0, chai_1.expect)(resBody.job).to.equal(reqBody.job);\n        (0, chai_1.expect)(resBody.updatedAt).to.be.a('string').and.match(dateInISOFormat);\n    })",
              "err": {},
              "uuid": "b4a0501b-e82f-4f7d-96c8-cc7dfe922d36",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE to /users/id for an existing user should return status 204",
              "fullTitle": "ReqRes API DELETE to /users/id for an existing user should return status 204",
              "timedOut": false,
              "duration": 342,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/users/2',\n            method: 'delete',\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(204);\n        (0, chai_1.expect)(res.headers['content-length']).to.equal('0');\n    })",
              "err": {},
              "uuid": "b42d3690-fae7-4f21-8071-b10626c2793b",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with valid data should return status 200 and the registration id and token",
              "fullTitle": "ReqRes API POST to /register with valid data should return status 200 and the registration id and token",
              "timedOut": false,
              "duration": 373,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/register',\n            method: 'post',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        const resBody = res.data;\n        (0, chai_1.expect)(resBody.id).to.equal(4);\n        (0, chai_1.expect)(resBody.token).to.equal('QpwL5tke4Pnpja7X4');\n    })",
              "err": {},
              "uuid": "742f0f38-33a6-44b5-8edb-aa35515bd427",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /register with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 382,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            email: 'sydney@fife',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/register',\n            method: 'post',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(400);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(res.data.error).to.equal('Missing password');\n    })",
              "err": {},
              "uuid": "aefeaf7a-3674-44c8-bd7d-c63ae3072c8c",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with valid data should return status 200 and the login token",
              "fullTitle": "ReqRes API POST to /login with valid data should return status 200 and the login token",
              "timedOut": false,
              "duration": 348,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/login',\n            method: 'post',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(200);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(res.data.token).to.equal('QpwL5tke4Pnpja7X4');\n    })",
              "err": {},
              "uuid": "15c0887c-0184-432d-9af6-0321f3cde7cb",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /login with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 425,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const reqBody = {\n            email: 'peter@klaven',\n        };\n        // Act\n        const res = yield (0, axios_1.default)({\n            url: '/login',\n            method: 'post',\n            data: reqBody,\n        });\n        // Assert\n        (0, chai_1.expect)(res.status).to.equal(400);\n        (0, chai_1.expect)(res.headers['content-type']).to.equal('application/json; charset=utf-8');\n        (0, chai_1.expect)(res.data.error).to.equal('Missing password');\n    })",
              "err": {},
              "uuid": "ae52f214-e7b6-4eff-acbc-444313d618dc",
              "parentUUID": "8cc3e362-7780-40af-9cd9-8070ab39a6d0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d763f591-7559-4fed-9b8d-3034d7169382",
            "14dc5fa1-9118-4063-8c9e-e5af48063ffd",
            "4576ac68-e1cb-4dd1-ac19-443fdbed852c",
            "6b6a3402-0465-4f36-a478-68e12524d804",
            "928e3fa6-46a8-4ea1-8ec7-cbc00c2881f8",
            "86ad40ed-0893-465f-9326-7e3e1f64a4b4",
            "506d5113-06f3-4870-b2cb-5922ce0484e7",
            "6f9378da-77ec-4db8-9da5-67a7bbd15e3e",
            "b4a0501b-e82f-4f7d-96c8-cc7dfe922d36",
            "b42d3690-fae7-4f21-8071-b10626c2793b",
            "742f0f38-33a6-44b5-8edb-aa35515bd427",
            "aefeaf7a-3674-44c8-bd7d-c63ae3072c8c",
            "15c0887c-0184-432d-9af6-0321f3cde7cb",
            "ae52f214-e7b6-4eff-acbc-444313d618dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4706,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "index",
        "reportDir": "./reports",
        "charts": "true"
      },
      "version": "6.2.0"
    }
  }
}