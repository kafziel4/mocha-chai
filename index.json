{
  "stats": {
    "suites": 4,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-27T01:07:41.803Z",
    "end": "2024-04-27T01:07:44.702Z",
    "duration": 2899,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "db775576-b90b-4d8c-928b-94e5a8fb8cac",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b103fca5-b70e-4dd9-962b-c364d65e7ff5",
          "title": "ReqRes API Colors endpoints",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/colors.spec.ts",
          "file": "/test/tests/colors.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ReqRes API Colors endpoints\"",
              "fullTitle": "ReqRes API Colors endpoints \"before all\" hook in \"ReqRes API Colors endpoints\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reqResClient = new reqres_client_1.ReqResClient();",
              "err": {},
              "uuid": "4895ddbd-2cc3-41ba-9cda-5392aa013f50",
              "parentUUID": "b103fca5-b70e-4dd9-962b-c364d65e7ff5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /colors should return status 200 and a list of colors",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors should return status 200 and a list of colors",
              "timedOut": false,
              "duration": 318,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const expectedResponse = colors_1.colors;\n        // Act\n        const response = yield reqResClient.getColors();\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(expectedResponse);\n    })",
              "err": {},
              "uuid": "d4ca513e-08c6-4385-a9af-711a674a29d7",
              "parentUUID": "b103fca5-b70e-4dd9-962b-c364d65e7ff5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for an existing color should return status 200 and the color data",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors/id for an existing color should return status 200 and the color data",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const expectedResponse = {\n            data: {\n                id: 2,\n                name: 'fuchsia rose',\n                year: 2001,\n                color: '#C74375',\n                pantone_value: '17-2031',\n            },\n        };\n        // Act\n        const response = yield reqResClient.getSingleColor(expectedResponse.data.id);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(expectedResponse);\n    })",
              "err": {},
              "uuid": "7bb406c0-f851-4b36-a253-920482b315f3",
              "parentUUID": "b103fca5-b70e-4dd9-962b-c364d65e7ff5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for a color that does not exist should return status 404",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors/id for a color that does not exist should return status 404",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const nonexistentId = 23;\n        // Act\n        const response = yield reqResClient.getSingleColor(nonexistentId);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(404);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "b10bba46-2bd5-4654-a66c-cece78ab4c19",
              "parentUUID": "b103fca5-b70e-4dd9-962b-c364d65e7ff5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d4ca513e-08c6-4385-a9af-711a674a29d7",
            "7bb406c0-f851-4b36-a253-920482b315f3",
            "b10bba46-2bd5-4654-a66c-cece78ab4c19"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 765,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bc3175b0-1374-46e5-bc7c-285ac10638e9",
          "title": "ReqRes API Login endpoints",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/login.spec.ts",
          "file": "/test/tests/login.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ReqRes API Login endpoints\"",
              "fullTitle": "ReqRes API Login endpoints \"before all\" hook in \"ReqRes API Login endpoints\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reqResClient = new reqres_client_1.ReqResClient();",
              "err": {},
              "uuid": "8572c7ee-98b3-473a-846e-0cf7e74e98cd",
              "parentUUID": "bc3175b0-1374-46e5-bc7c-285ac10638e9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST to /login with valid data should return status 200 and the login token",
              "fullTitle": "ReqRes API Login endpoints POST to /login with valid data should return status 200 and the login token",
              "timedOut": false,
              "duration": 242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        const expectedResponse = {\n            token: 'QpwL5tke4Pnpja7X4',\n        };\n        // Act\n        const response = yield reqResClient.postLogin(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.equal(expectedResponse);\n    })",
              "err": {},
              "uuid": "60f0019f-d822-4d58-b2e8-06aa6e3711ca",
              "parentUUID": "bc3175b0-1374-46e5-bc7c-285ac10638e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API Login endpoints POST to /login with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'peter@klaven',\n        };\n        const expectedResponse = {\n            error: constants_1.missingPassword,\n        };\n        // Act\n        const response = yield reqResClient.postLogin(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(400);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.equal(expectedResponse);\n    })",
              "err": {},
              "uuid": "8feee985-c4e5-478a-9c41-6be1033b8a73",
              "parentUUID": "bc3175b0-1374-46e5-bc7c-285ac10638e9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "60f0019f-d822-4d58-b2e8-06aa6e3711ca",
            "8feee985-c4e5-478a-9c41-6be1033b8a73"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 459,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f92ace58-3212-414d-8894-0606359f7cc8",
          "title": "ReqRes API Register endpoints",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/register.spec.ts",
          "file": "/test/tests/register.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ReqRes API Register endpoints\"",
              "fullTitle": "ReqRes API Register endpoints \"before all\" hook in \"ReqRes API Register endpoints\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reqResClient = new reqres_client_1.ReqResClient();",
              "err": {},
              "uuid": "f5702754-27aa-4221-ad3b-ad93e69cb00b",
              "parentUUID": "f92ace58-3212-414d-8894-0606359f7cc8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST to /register with valid data should return status 200 and the registration id and token",
              "fullTitle": "ReqRes API Register endpoints POST to /register with valid data should return status 200 and the registration id and token",
              "timedOut": false,
              "duration": 268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'eve.holt@reqres.in',\n            password: 'pistol',\n        };\n        const expectedResponse = {\n            id: 4,\n            token: 'QpwL5tke4Pnpja7X4',\n        };\n        // Act\n        const response = yield reqResClient.postRegister(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.equal(expectedResponse);\n    })",
              "err": {},
              "uuid": "9c58796e-df89-48a9-bf17-c81fee23be87",
              "parentUUID": "f92ace58-3212-414d-8894-0606359f7cc8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API Register endpoints POST to /register with missing password should return status 400 and the validation error",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            email: 'sydney@fife',\n        };\n        const expectedResponse = {\n            error: constants_1.missingPassword,\n        };\n        // Act\n        const response = yield reqResClient.postRegister(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(400);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.equal(expectedResponse);\n    })",
              "err": {},
              "uuid": "02f7f51e-4b98-44f4-9066-8552603f4216",
              "parentUUID": "f92ace58-3212-414d-8894-0606359f7cc8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c58796e-df89-48a9-bf17-c81fee23be87",
            "02f7f51e-4b98-44f4-9066-8552603f4216"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 485,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e42b2aeb-7505-4646-8240-7432f835ee60",
          "title": "ReqRes API Users endpoints",
          "fullFile": "/home/runner/work/mocha-chai-api-tests/mocha-chai-api-tests/test/tests/users.spec.ts",
          "file": "/test/tests/users.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ReqRes API Users endpoints\"",
              "fullTitle": "ReqRes API Users endpoints \"before all\" hook in \"ReqRes API Users endpoints\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reqResClient = new reqres_client_1.ReqResClient();",
              "err": {},
              "uuid": "d5df8052-97c3-45bb-a627-33d9acd708d0",
              "parentUUID": "e42b2aeb-7505-4646-8240-7432f835ee60",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /users should return status 200 and a list of users",
              "fullTitle": "ReqRes API Users endpoints GET to /users should return status 200 and a list of users",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const page = 2;\n        const expectedResponse = users_1.users;\n        // Act\n        const response = yield reqResClient.getUsers(page);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(expectedResponse);\n    })",
              "err": {},
              "uuid": "f1335997-db5f-442d-8630-645519c820d7",
              "parentUUID": "e42b2aeb-7505-4646-8240-7432f835ee60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for an existing user should return status 200 and the user data",
              "fullTitle": "ReqRes API Users endpoints GET to /users/id for an existing user should return status 200 and the user data",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const expectedResponse = {\n            data: {\n                id: 2,\n                email: 'janet.weaver@reqres.in',\n                first_name: 'Janet',\n                last_name: 'Weaver',\n                avatar: 'https://reqres.in/img/faces/2-image.jpg',\n            },\n        };\n        // Act\n        const response = yield reqResClient.getSingleUser(expectedResponse.data.id);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(expectedResponse);\n    })",
              "err": {},
              "uuid": "70bd3a2b-5ae4-49ca-89d3-f23fba215d3b",
              "parentUUID": "e42b2aeb-7505-4646-8240-7432f835ee60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for a user that does not exist should return status 404",
              "fullTitle": "ReqRes API Users endpoints GET to /users/id for a user that does not exist should return status 404",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const nonexistentId = 23;\n        // Act\n        const response = yield reqResClient.getSingleUser(nonexistentId);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(404);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.be.an('object').that.is.empty;\n    })",
              "err": {},
              "uuid": "cb7df32b-7073-4837-8ea0-343eb16d9943",
              "parentUUID": "e42b2aeb-7505-4646-8240-7432f835ee60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /users with valid data should return status 201 and the user data",
              "fullTitle": "ReqRes API Users endpoints POST to /users with valid data should return status 201 and the user data",
              "timedOut": false,
              "duration": 213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const requestBody = {\n            name: 'morpheus',\n            job: 'leader',\n        };\n        // Act\n        const response = yield reqResClient.postUser(requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(201);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(requestBody);\n        (0, chai_1.expect)(response.data.id).to.match(constants_1.oneToThreeDigits);\n        (0, chai_1.expect)(response.data.createdAt).to.match(constants_1.dateInISOFormat);\n    })",
              "err": {},
              "uuid": "93fd1140-871d-47ae-bb7c-37e453a02f37",
              "parentUUID": "e42b2aeb-7505-4646-8240-7432f835ee60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API Users endpoints PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const id = 2;\n        const requestBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const response = yield reqResClient.putUser(id, requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(requestBody);\n        (0, chai_1.expect)(response.data.updatedAt).to.match(constants_1.dateInISOFormat);\n    })",
              "err": {},
              "uuid": "85cd1ddb-0f56-4ba9-919c-448f1d5031b1",
              "parentUUID": "e42b2aeb-7505-4646-8240-7432f835ee60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API Users endpoints PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const id = 2;\n        const requestBody = {\n            name: 'morpheus',\n            job: 'zion resident',\n        };\n        // Act\n        const response = yield reqResClient.patchUser(id, requestBody);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(200);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n        (0, chai_1.expect)(response.data).to.deep.include(requestBody);\n        (0, chai_1.expect)(response.data.updatedAt).to.match(constants_1.dateInISOFormat);\n    })",
              "err": {},
              "uuid": "9000d367-5048-4af3-aa90-2117329df039",
              "parentUUID": "e42b2aeb-7505-4646-8240-7432f835ee60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE to /users/id for an existing user should return status 204",
              "fullTitle": "ReqRes API Users endpoints DELETE to /users/id for an existing user should return status 204",
              "timedOut": false,
              "duration": 253,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Arrange\n        const id = 2;\n        // Act\n        const response = yield reqResClient.deleteUser(id);\n        // Assert\n        (0, chai_1.expect)(response.status).to.equal(204);\n        (0, chai_1.expect)(response.headers[constants_1.headers.contentLength]).to.equal('0');\n    })",
              "err": {},
              "uuid": "88f47aaf-f93d-42b7-ba01-45edd66efc23",
              "parentUUID": "e42b2aeb-7505-4646-8240-7432f835ee60",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1335997-db5f-442d-8630-645519c820d7",
            "70bd3a2b-5ae4-49ca-89d3-f23fba215d3b",
            "cb7df32b-7073-4837-8ea0-343eb16d9943",
            "93fd1140-871d-47ae-bb7c-37e453a02f37",
            "85cd1ddb-0f56-4ba9-919c-448f1d5031b1",
            "9000d367-5048-4af3-aa90-2117329df039",
            "88f47aaf-f93d-42b7-ba01-45edd66efc23"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1166,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "index",
        "reportDir": "./reports",
        "charts": "true"
      },
      "version": "6.2.0"
    }
  }
}